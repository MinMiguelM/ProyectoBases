/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import controllers.AllConstraintsJpaController;
import controllers.AllSynonymsJpaController;
import controllers.DbaMviewsJpaController;
import controllers.DbaTabColumnsJpaController;
import controllers.DbaTablesJpaController;
import controllers.DbaViewsJpaController;
import entities.AllSynonyms;
import entities.DbaMviews;
import entities.DbaTabColumns;
import entities.DbaTables;
import entities.DbaViews;
import java.io.File;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author William
 */
public class TablasFrame extends javax.swing.JFrame {

    private String usuario;
    
    private EntityManagerFactory emf;
    
    /**
     * Creates new form TablasFrame
     */
    public TablasFrame() {
        initComponents();
        init();
    }
    
    public TablasFrame(String usuario) {
        this.usuario = usuario;
        initComponents();
        init();
    }
    
    private void loadTables() {
        DbaTablesJpaController tablesController = new DbaTablesJpaController(emf);
        DbaViewsJpaController viewsController = new DbaViewsJpaController(emf);
        DbaMviewsJpaController mviewsController = new DbaMviewsJpaController(emf);
        AllSynonymsJpaController synonymsController = new AllSynonymsJpaController(emf);
        
        List<DbaTables> tables = tablesController.getTablesByOwner(usuario);
        List<DbaViews> views = viewsController.getViewsByOwner(usuario);
        List<DbaMviews> mviews = mviewsController.getMviewsByOwner(usuario);
        List<AllSynonyms> synonyms = synonymsController.getSynonymsByOwner(usuario);
        
        DefaultListModel model = (DefaultListModel) leftList.getModel();
        
        for (DbaTables table : tables) {
            model.addElement(table.getTableName());
        }
        
        for (DbaViews view : views) {
            model.addElement(view.getViewName());
        }
        
        for (DbaMviews mview : mviews) {
            model.addElement(mview.getMviewName());
        }
        
        for (AllSynonyms syn : synonyms) {
            model.addElement(syn.getSynonymName());
        }
    }
    
    private void init() {
        emf = Persistence.createEntityManagerFactory("ProyectoBasesPU");
        loadTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPanel = new javax.swing.JTabbedPane();
        tablasPanel = new javax.swing.JPanel();
        moverSeleccionButton = new javax.swing.JButton();
        moverTodosButton = new javax.swing.JButton();
        devolverSeleccionButton = new javax.swing.JButton();
        devolverTodosButton = new javax.swing.JButton();
        leftScrollPane = new javax.swing.JScrollPane();
        leftList = new javax.swing.JList<>();
        rightScrollPane = new javax.swing.JScrollPane();
        rightList = new javax.swing.JList<>();
        disponiblesLabel = new javax.swing.JLabel();
        seleccionadosLabel = new javax.swing.JLabel();
        verDetallesButton = new javax.swing.JButton();
        detallesPanel = new javax.swing.JPanel();
        volverButton = new javax.swing.JButton();
        atributosScrollPane = new javax.swing.JScrollPane();
        atributosTable = new javax.swing.JTable();
        seleccionarLabel = new javax.swing.JLabel();
        construirButton = new javax.swing.JButton();
        queryPanel = new javax.swing.JPanel();
        atributosSeleccionadosScrollPane = new javax.swing.JScrollPane();
        atributosSeleccionadosTable = new javax.swing.JTable();
        atributosSeleccionadosLabel = new javax.swing.JLabel();
        mapeoLlavesLabel = new javax.swing.JLabel();
        sqlScrollPane = new javax.swing.JScrollPane();
        sqlTextArea = new javax.swing.JTextArea();
        sqlLabel = new javax.swing.JLabel();
        generarSqlButton = new javax.swing.JButton();
        ejecutarButton = new javax.swing.JButton();
        mapeoLlavesScrollPane = new javax.swing.JScrollPane();
        joinTable = new javax.swing.JTable();
        agregarJoinButton = new javax.swing.JButton();
        eliminarJoinButton = new javax.swing.JButton();
        whereLabel = new javax.swing.JLabel();
        whereScrollPane = new javax.swing.JScrollPane();
        whereTable = new javax.swing.JTable();
        agregarCondicionButton = new javax.swing.JButton();
        eliminarCondicionButton = new javax.swing.JButton();
        orderByLabel = new javax.swing.JLabel();
        orderByScrollPane = new javax.swing.JScrollPane();
        orderByTable = new javax.swing.JTable();
        cargarButton = new javax.swing.JButton();
        guardarButton = new javax.swing.JButton();
        agregarOrderByButton = new javax.swing.JButton();
        eliminarOrderByButton = new javax.swing.JButton();
        resultadoPanel = new javax.swing.JPanel();
        resultadoLabel = new javax.swing.JLabel();
        resultadoScrollPane = new javax.swing.JScrollPane();
        resultadoTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(this.usuario);

        moverSeleccionButton.setText(">");
        moverSeleccionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moverSeleccionButtonActionPerformed(evt);
            }
        });

        moverTodosButton.setText(">>");
        moverTodosButton.setMaximumSize(new java.awt.Dimension(50, 23));
        moverTodosButton.setMinimumSize(new java.awt.Dimension(50, 23));
        moverTodosButton.setPreferredSize(new java.awt.Dimension(50, 23));
        moverTodosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moverTodosButtonActionPerformed(evt);
            }
        });

        devolverSeleccionButton.setText("<");
        devolverSeleccionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devolverSeleccionButtonActionPerformed(evt);
            }
        });

        devolverTodosButton.setText("<<");
        devolverTodosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devolverTodosButtonActionPerformed(evt);
            }
        });

        leftList.setModel(new DefaultListModel());
        leftScrollPane.setViewportView(leftList);

        rightList.setModel(new DefaultListModel());
        rightScrollPane.setViewportView(rightList);

        disponiblesLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        disponiblesLabel.setText("Disponibles");

        seleccionadosLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        seleccionadosLabel.setText("Seleccionados");

        verDetallesButton.setText("Ver");
        verDetallesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verDetallesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tablasPanelLayout = new javax.swing.GroupLayout(tablasPanel);
        tablasPanel.setLayout(tablasPanelLayout);
        tablasPanelLayout.setHorizontalGroup(
            tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablasPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablasPanelLayout.createSequentialGroup()
                        .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tablasPanelLayout.createSequentialGroup()
                                .addComponent(leftScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(devolverTodosButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(moverTodosButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(moverSeleccionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(devolverSeleccionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(disponiblesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rightScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seleccionadosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablasPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(verDetallesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        tablasPanelLayout.setVerticalGroup(
            tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablasPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(disponiblesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tablasPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(seleccionadosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(leftScrollPane)
                        .addComponent(rightScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablasPanelLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(moverSeleccionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moverTodosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(devolverSeleccionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(devolverTodosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(61, 61, 61)
                .addComponent(verDetallesButton)
                .addContainerGap(207, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Tablas", tablasPanel);

        volverButton.setText("Volver");
        volverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverButtonActionPerformed(evt);
            }
        });

        atributosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TABLA", "ATRIBUTO", "TIPO", "LONGITUD", "PK", "FK", "IDX"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        atributosScrollPane.setViewportView(atributosTable);

        seleccionarLabel.setText("Selecciona los atributos que quieras incluir en tu consulta y haz clic en Construir");

        construirButton.setText("Construir");
        construirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                construirButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout detallesPanelLayout = new javax.swing.GroupLayout(detallesPanel);
        detallesPanel.setLayout(detallesPanelLayout);
        detallesPanelLayout.setHorizontalGroup(
            detallesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detallesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detallesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(atributosScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 777, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detallesPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(seleccionarLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detallesPanelLayout.createSequentialGroup()
                        .addComponent(volverButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(construirButton)))
                .addContainerGap())
        );
        detallesPanelLayout.setVerticalGroup(
            detallesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detallesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(atributosScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seleccionarLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(detallesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(construirButton)
                    .addComponent(volverButton))
                .addGap(44, 44, 44))
        );

        tabbedPanel.addTab("Detalles", detallesPanel);

        atributosSeleccionadosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ATRIBUTO", "PK", "FK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        atributosSeleccionadosScrollPane.setViewportView(atributosSeleccionadosTable);

        atributosSeleccionadosLabel.setText("Atributos seleccionados");

        mapeoLlavesLabel.setText("Opciones de Join");

        sqlTextArea.setColumns(20);
        sqlTextArea.setRows(5);
        sqlScrollPane.setViewportView(sqlTextArea);

        sqlLabel.setText("SQL");

        generarSqlButton.setText("Generar SQL");
        generarSqlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarSqlButtonActionPerformed(evt);
            }
        });

        ejecutarButton.setText("Ejecutar");
        ejecutarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarButtonActionPerformed(evt);
            }
        });

        joinTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Table 1", "Tipo de Join", "Table 2", "Condición de Join"
            }
        ));
        mapeoLlavesScrollPane.setViewportView(joinTable);

        agregarJoinButton.setText("+");
        agregarJoinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarJoinButtonActionPerformed(evt);
            }
        });

        eliminarJoinButton.setText("-");
        eliminarJoinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarJoinButtonActionPerformed(evt);
            }
        });

        whereLabel.setText("Condiciones WHERE");

        whereTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AND/OR", "Operando 1", "Condición", "Operando 2"
            }
        ));
        whereScrollPane.setViewportView(whereTable);

        agregarCondicionButton.setText("+");
        agregarCondicionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarCondicionButtonActionPerformed(evt);
            }
        });

        eliminarCondicionButton.setText("-");
        eliminarCondicionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarCondicionButtonActionPerformed(evt);
            }
        });

        orderByLabel.setText("Order By");

        orderByTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Attribute", "ASC/DESC"
            }
        ));
        orderByScrollPane.setViewportView(orderByTable);

        cargarButton.setText("Cargar...");
        cargarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarButtonActionPerformed(evt);
            }
        });

        guardarButton.setText("Guardar...");
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        agregarOrderByButton.setText("+");
        agregarOrderByButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarOrderByButtonActionPerformed(evt);
            }
        });

        eliminarOrderByButton.setText("-");
        eliminarOrderByButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarOrderByButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout queryPanelLayout = new javax.swing.GroupLayout(queryPanel);
        queryPanel.setLayout(queryPanelLayout);
        queryPanelLayout.setHorizontalGroup(
            queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(queryPanelLayout.createSequentialGroup()
                        .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(queryPanelLayout.createSequentialGroup()
                                .addComponent(orderByLabel)
                                .addGap(0, 687, Short.MAX_VALUE))
                            .addComponent(mapeoLlavesScrollPane))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(agregarJoinButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eliminarJoinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(queryPanelLayout.createSequentialGroup()
                        .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(queryPanelLayout.createSequentialGroup()
                                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(atributosSeleccionadosScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                    .addComponent(atributosSeleccionadosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(whereLabel)
                                    .addGroup(queryPanelLayout.createSequentialGroup()
                                        .addComponent(whereScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(agregarCondicionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(eliminarCondicionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(queryPanelLayout.createSequentialGroup()
                                .addComponent(orderByScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(agregarOrderByButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(eliminarOrderByButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(queryPanelLayout.createSequentialGroup()
                        .addComponent(mapeoLlavesLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryPanelLayout.createSequentialGroup()
                        .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sqlScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(queryPanelLayout.createSequentialGroup()
                                .addComponent(sqlLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(generarSqlButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ejecutarButton)))
                        .addGap(6, 6, 6))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cargarButton)
                .addGap(18, 18, 18)
                .addComponent(guardarButton)
                .addGap(6, 6, 6))
        );
        queryPanelLayout.setVerticalGroup(
            queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atributosSeleccionadosLabel)
                    .addComponent(whereLabel))
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(queryPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(whereScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(atributosSeleccionadosScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(queryPanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(agregarCondicionButton)
                        .addGap(10, 10, 10)
                        .addComponent(eliminarCondicionButton)))
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(queryPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(mapeoLlavesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mapeoLlavesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(orderByLabel)
                        .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(queryPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orderByScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(queryPanelLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(agregarOrderByButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eliminarOrderByButton))))
                    .addGroup(queryPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addComponent(agregarJoinButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eliminarJoinButton)
                        .addGap(225, 225, 225)))
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sqlLabel)
                    .addComponent(generarSqlButton)
                    .addComponent(ejecutarButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sqlScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cargarButton)
                    .addComponent(guardarButton))
                .addContainerGap())
        );

        tabbedPanel.addTab("Query", queryPanel);

        resultadoLabel.setText("Resultado de ejecución");

        resultadoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        resultadoScrollPane.setViewportView(resultadoTable);

        javax.swing.GroupLayout resultadoPanelLayout = new javax.swing.GroupLayout(resultadoPanel);
        resultadoPanel.setLayout(resultadoPanelLayout);
        resultadoPanelLayout.setHorizontalGroup(
            resultadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultadoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(resultadoPanelLayout.createSequentialGroup()
                        .addComponent(resultadoLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(resultadoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 777, Short.MAX_VALUE))
                .addContainerGap())
        );
        resultadoPanelLayout.setVerticalGroup(
            resultadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultadoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultadoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultadoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(380, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Resultado", resultadoPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPanel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moverSeleccionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moverSeleccionButtonActionPerformed
        List<String> selectedValuesList = leftList.getSelectedValuesList();
        int[] selectedIndices = leftList.getSelectedIndices();
        
        if (selectedValuesList.size() > 0) {
            
            DefaultListModel leftListModel = (DefaultListModel) leftList.getModel();
            for (int i = selectedIndices.length - 1; i >= 0; --i) {    
                leftListModel.remove(selectedIndices[i]);
            }
            
            DefaultListModel rightListModel = (DefaultListModel) rightList.getModel();
            for (int i = 0; i < selectedIndices.length; ++i) {
                rightListModel.addElement(selectedValuesList.get(i));
            }
            
        }
        
    }//GEN-LAST:event_moverSeleccionButtonActionPerformed

    private void devolverSeleccionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolverSeleccionButtonActionPerformed
        List<String> selectedValuesList = rightList.getSelectedValuesList();
        int[] selectedIndices = rightList.getSelectedIndices();
        
        if (selectedValuesList.size() > 0) {
            
            DefaultListModel rightListModel = (DefaultListModel) rightList.getModel();
            for (int i = selectedIndices.length - 1; i >= 0; --i) {    
                rightListModel.remove(selectedIndices[i]);
            }
            
            DefaultListModel leftListModel = (DefaultListModel) leftList.getModel();
            for (int i = 0; i < selectedIndices.length; ++i) {
                leftListModel.addElement(selectedValuesList.get(i));
            }
            
        }
    }//GEN-LAST:event_devolverSeleccionButtonActionPerformed

    private void moverTodosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moverTodosButtonActionPerformed
        DefaultListModel leftListModel = (DefaultListModel) leftList.getModel();
        
        Object[] array = leftListModel.toArray();
        if (array.length > 0) {

            for (int i = array.length - 1; i >= 0; --i) {    
                leftListModel.remove(i);
            }
            
            DefaultListModel rightListModel = (DefaultListModel) rightList.getModel();
            for (int i = 0; i < array.length; ++i) {
                rightListModel.addElement((String) array[i]);
            }
            
        }
    }//GEN-LAST:event_moverTodosButtonActionPerformed

    private void devolverTodosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolverTodosButtonActionPerformed
        DefaultListModel rightListModel = (DefaultListModel) rightList.getModel();
        
        Object[] array = rightListModel.toArray();
        if (array.length > 0) {
            
            for (int i = array.length - 1; i >= 0; --i) {    
                rightListModel.remove(i);
            }
            
            DefaultListModel leftListModel = (DefaultListModel) leftList.getModel();
            for (int i = 0; i < array.length; ++i) {
                leftListModel.addElement((String) array[i]);
            }
            
        }
    }//GEN-LAST:event_devolverTodosButtonActionPerformed

    private Object[] tablasSinSinonimos(Object[] array) {
        //List<Object> arr = Collections.synchronizedList(new ArrayList<>(Arrays.asList(array)));
        List<Object> arr = new ArrayList<>(Arrays.asList(array));
        AllSynonymsJpaController synonymsController = new AllSynonymsJpaController(emf);
        List<AllSynonyms> synonyms = synonymsController.getSynonymsByOwner(usuario);
        List<String> synonymNames = new ArrayList<>();
        
        for (AllSynonyms syn : synonyms) {
            synonymNames.add(syn.getSynonymName());
        }
        
        for (Object o : arr) {
            int index = synonymNames.indexOf((String) o);
            if (index > -1) {
                System.out.println("Encontro sinonimo: " + o);
                arr.set(arr.indexOf(o), synonyms.get(index).getTableName());
            }
        }
        
        // Eliminar duplicados
        Set<Object> set = new HashSet<>();
        set.addAll(arr);
        arr.clear();
        arr.addAll(set);
        
        return arr.toArray();
    }
    
    private void verDetallesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verDetallesButtonActionPerformed
        DefaultListModel rightListModel = (DefaultListModel) rightList.getModel();
        Object[] array = rightListModel.toArray();
        
        // Buscar la tabla que referencian los sinonimos y reemplazar los sinonimos por las tablas originales
        array = tablasSinSinonimos(array);
        
        
        
        if (array.length > 0) {
            DefaultTableModel model = (DefaultTableModel) atributosTable.getModel();
            model.setRowCount(0);
            
            tabbedPanel.setSelectedIndex(1);
            
            System.out.print("tablas: ");
            for (int i = 0; i < array.length; ++i) {
                System.out.println(array[i] + ", ");
            }
            DbaTabColumnsJpaController controller = new DbaTabColumnsJpaController(emf);
            AllConstraintsJpaController constraintsController = new AllConstraintsJpaController(emf);
            List<DbaTabColumns> result = controller.getColumnsByOwner(usuario, array);
            
            for (DbaTabColumns col : result) {
                List l = constraintsController.isSomeConstraint( col.getColumnName(),col.getTableName(),usuario);
                System.out.println("list l = " + l);
                model.addRow(new Object[] {col.getTableName(), col.getColumnName(), col.getDataType(), col.getDataLength(), l.get(0), l.get(1), l.get(2)});
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona al menos una tabla/vista.");
        }
    }//GEN-LAST:event_verDetallesButtonActionPerformed

    private void volverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverButtonActionPerformed
        tabbedPanel.setSelectedIndex(0);
    }//GEN-LAST:event_volverButtonActionPerformed

    private class AtributosSeleccionados {
        public AtributosSeleccionados(String atr, boolean pk, boolean fk) {
            this.nombreAtributo = atr;
            this.pk = pk;
            this.fk = fk;
        }
        public String nombreAtributo;
        public boolean pk;
        public boolean fk;
    }
    
    private void borrarTabla(DefaultTableModel model) {
        model.setRowCount(0);
    }
    
    private boolean masDeUnaTablaSeleccionada(List<AtributosSeleccionados> seleccionados) {
        String first = "";
        
        for (int i = 0; i < seleccionados.size(); i++) {
            int index = seleccionados.get(i).nombreAtributo.indexOf(".");
            if (i == 0) {
                first = seleccionados.get(i).nombreAtributo.substring(0, index);
            }
                
            if (!seleccionados.get(i).nombreAtributo.substring(0, index).equalsIgnoreCase(first)) {
                return true;
            }
        }
        return false;
    }
    
    private void construirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_construirButtonActionPerformed
        int[] selectedRows = atributosTable.getSelectedRows();
        int COL_TABLA = 0;
        int COL_ATRIBUTO = 1;
        int COL_PK = 4;
        int COL_FK = 5;
        
        List<AtributosSeleccionados> atributosSeleccionados = new ArrayList<>();
        for (int i : selectedRows) {
            String tabla = ((String) atributosTable.getValueAt(i, COL_TABLA)) + "." + ((String) atributosTable.getValueAt(i, COL_ATRIBUTO));
            boolean pk = (boolean) atributosTable.getValueAt(i, COL_PK);
            boolean fk = (boolean) atributosTable.getValueAt(i, COL_FK);
            atributosSeleccionados.add(new AtributosSeleccionados(tabla, pk, fk));
        }
        
        if (atributosSeleccionados.size() > 0) {
            DefaultTableModel model = (DefaultTableModel) atributosSeleccionadosTable.getModel();
            DefaultTableModel modelJoin = (DefaultTableModel) joinTable.getModel();
            DefaultTableModel modelWhere = (DefaultTableModel) whereTable.getModel();
            DefaultTableModel modelOrderBy = (DefaultTableModel) orderByTable.getModel();
            borrarTabla(model);
            borrarTabla(modelJoin);
            borrarTabla(modelWhere);
            borrarTabla(modelOrderBy);
            for (AtributosSeleccionados as : atributosSeleccionados) {
                model.addRow(new Object[]{as.nombreAtributo, as.pk, as.fk});
            }
            
            // TODO: poner el mapeo de llaves sugerido (foreign keys mapeadas en los joins)
            //modelJoin.addRow(....)
            
            if (!masDeUnaTablaSeleccionada(atributosSeleccionados)) {
                agregarJoinButton.setEnabled(false);
                eliminarJoinButton.setEnabled(false);
            } else {
                agregarJoinButton.setEnabled(true);
                eliminarJoinButton.setEnabled(true);
            }
            sqlTextArea.setText("");
            tabbedPanel.setSelectedIndex(2);
        }
    }//GEN-LAST:event_construirButtonActionPerformed
    
    private List<String> getSelectedTablesFromAttributes() {
        DefaultTableModel model = (DefaultTableModel) atributosSeleccionadosTable.getModel();
        List<String> tables = new ArrayList<>();
        
        for (int i = 0; i < model.getRowCount(); i++) {
            String attribute = (String) model.getValueAt(i, 0);
            int index = attribute.indexOf(".");
            String table = attribute.substring(0, index);
            if (!tables.contains(table)) {
                tables.add(table);
            }
        }
        return tables;
    }
    
    private void agregarJoinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarJoinButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) joinTable.getModel();
        
        TableColumn tableColumn = joinTable.getColumnModel().getColumn(0);
        TableColumn tableColumn2 = joinTable.getColumnModel().getColumn(2);
        JComboBox tables = new JComboBox();
        List<String> tablesList = getSelectedTablesFromAttributes();
        for (String s : tablesList) {
            tables.addItem(s);
        }
        tableColumn.setCellEditor(new DefaultCellEditor(tables));
        tableColumn2.setCellEditor(new DefaultCellEditor(tables));
        
        // Crear Combo box con opciones de join
        TableColumn joinColumn = joinTable.getColumnModel().getColumn(1);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("INNER JOIN");
        comboBox.addItem("LEFT OUTER JOIN");
        comboBox.addItem("RIGHT OUTER JOIN");
        comboBox.addItem("FULL OUTER JOIN");
        joinColumn.setCellEditor(new DefaultCellEditor(comboBox));
        if (model.getRowCount() == 0) {
            model.addRow(new Object[]{tablesList.get(0),"INNER JOIN",tablesList.get(1),""});
        }
        else {
            model.addRow(new Object[]{"","INNER JOIN",tablesList.get(1),""});
        }
        if (model.getRowCount() >= getSelectedTablesFromAttributes().size() - 1) {
            agregarJoinButton.setEnabled(false);
        }
    }//GEN-LAST:event_agregarJoinButtonActionPerformed

    private void eliminarJoinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarJoinButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) joinTable.getModel();
        if (model.getRowCount() > 0) {
            model.removeRow(model.getRowCount() - 1);
            if (model.getRowCount() < getSelectedTablesFromAttributes().size() - 1) {
                agregarJoinButton.setEnabled(true);
            }
        }
    }//GEN-LAST:event_eliminarJoinButtonActionPerformed

    private List<String> getSelectedAttributes() {
        DefaultTableModel model = (DefaultTableModel) atributosSeleccionadosTable.getModel();
        List<String> attr = new ArrayList<>();
        
        for (int i = 0; i < model.getRowCount(); i++) {
            attr.add((String) model.getValueAt(i, 0));
        }
        
        return attr;
    }
    
    private void agregarCondicionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarCondicionButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) whereTable.getModel();
        
        TableColumn andOrColumn = whereTable.getColumnModel().getColumn(0);
        JComboBox andOrComboBox = new JComboBox();
        andOrComboBox.addItem("");
        andOrComboBox.addItem("AND");
        andOrComboBox.addItem("OR");
        andOrColumn.setCellEditor(new DefaultCellEditor(andOrComboBox));
        
        /*
        TableColumn operando1Column = whereTable.getColumnModel().getColumn(1);
        TableColumn operando2Column = whereTable.getColumnModel().getColumn(3);
        JComboBox operandoComboBox = new JComboBox();
        operandoComboBox.setEditable(true);
        List<String> selectedAttributes = getSelectedAttributes();
        operandoComboBox.addItem("");
        for (String s : selectedAttributes) {
            operandoComboBox.addItem(s);
        }
        operando1Column.setCellEditor(new DefaultCellEditor(operandoComboBox));
        operando2Column.setCellEditor(new DefaultCellEditor(operandoComboBox));
        */
        TableColumn condicionColumn = whereTable.getColumnModel().getColumn(2);
        JComboBox condicionComboBox = new JComboBox();
        condicionComboBox.addItem("=");
        condicionComboBox.addItem("<>");
        condicionComboBox.addItem("<");
        condicionComboBox.addItem("<=");
        condicionComboBox.addItem(">");
        condicionComboBox.addItem(">=");
        condicionComboBox.addItem("IS NULL");
        condicionComboBox.addItem("IS NOT NULL");
        condicionColumn.setCellEditor(new DefaultCellEditor(condicionComboBox));
        if (model.getRowCount() > 0) {
            model.addRow(new Object[]{"AND","","=",""});
        } else {
            model.addRow(new Object[]{"", "", "=", ""});
        }
        
    }//GEN-LAST:event_agregarCondicionButtonActionPerformed

    private void eliminarCondicionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarCondicionButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) whereTable.getModel();
        if (model.getRowCount() > 0) {
            model.removeRow(model.getRowCount() - 1);
        }
    }//GEN-LAST:event_eliminarCondicionButtonActionPerformed

    private void loadQuery() {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(System.getProperty("user.dir") + "/queries"));
        int retrival = chooser.showOpenDialog(null);
        if (retrival == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = new File(chooser.getSelectedFile().getAbsolutePath());
                String content = new Scanner(selectedFile).useDelimiter("\\Z").next();
                sqlTextArea.setText(content);
            } catch (Exception ex) {
                ex.printStackTrace();
                sqlTextArea.setText("Error al cargar el archivo");
            }
        }
    }
    
    private void cargarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarButtonActionPerformed
        loadQuery();
    }//GEN-LAST:event_cargarButtonActionPerformed
    
    private void saveQuery() {
        String query = sqlTextArea.getText();
        
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(System.getProperty("user.dir") + "/queries"));
        int retrival = chooser.showSaveDialog(null);
        if (retrival == JFileChooser.APPROVE_OPTION) {
            try {
                FileWriter fw = new FileWriter(chooser.getSelectedFile()+".txt");
                fw.write(query.toString());
                fw.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
    
    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        saveQuery();
    }//GEN-LAST:event_guardarButtonActionPerformed
    
    private int getNumberOfJoins() {
        DefaultTableModel model = (DefaultTableModel) joinTable.getModel();
        return model.getRowCount();
    }
    
    private String getJoinClause() {
        String joinClause = "\r\nFROM ";
        DefaultTableModel model = (DefaultTableModel) joinTable.getModel();
        int numJoins = getNumberOfJoins();
        List<String> tables = getSelectedTablesFromAttributes();
        
        // Cuando solo es una tabla (sin joins)
        if (tables.size() == 1) {
            joinClause += usuario + "." + tables.get(0);
        }
        // Cuando hay mas de una tabla pero no hay join (producto cartesiano)
        else if (numJoins == 0) {
            for (int i = 0; i < tables.size(); ++i) {
                if (i == 0) {
                    joinClause += usuario + "." + tables.get(i);
                } else {
                    joinClause += ", " + usuario + "." + tables.get(i);
                }
            }
        }
        else {
            // Hacemos el primer join
            String table1 = (String) model.getValueAt(0, 0);
            String join = (String) model.getValueAt(0, 1);
            String table2 = (String) model.getValueAt(0, 2);
            String condicion = (String) model.getValueAt(0, 3);
            
            joinClause += usuario + "." + table1 + "\r\n" + join + " " + usuario + "." + table2 + "\r\n  ON " + condicion;
            
            // Si hay mas de un join seguimos uniendolos
            if (numJoins > 1) {
                for (int i = 1; i < numJoins; ++i) {
                    join = (String) model.getValueAt(i, 1);
                    table2 = (String) model.getValueAt(i, 2);
                    condicion = (String) model.getValueAt(i, 3);
                    
                    joinClause += "\r\n" + join + " " + usuario + "." + table2 + "\r\n  ON " + condicion;
                }
            }
        }
        
        
        return joinClause;
    }
    
    private int getNumberOfWheres() {
        DefaultTableModel model = (DefaultTableModel) whereTable.getModel();
        return model.getRowCount();
    }
    
    private String getWhereClause() {
        String where = "";
        DefaultTableModel model = (DefaultTableModel) whereTable.getModel();
        int numWheres = getNumberOfWheres();
        
        // Cuando no hay where
        if (numWheres == 0) {
            return where;
        }
        // Cuando hay where
        else {
            where += "\r\nWHERE ";
            String andOr = "";
            String op1 = (String) model.getValueAt(0, 1);
            String condicion = (String) model.getValueAt(0, 2);
            String op2;
            if (condicion.equalsIgnoreCase("IS NULL") || condicion.equalsIgnoreCase("IS NOT NULL")) {
                op2 = "";
            }
            else {
                op2 = (String) model.getValueAt(0, 3);
            }
            where += op1 + " " + condicion + " " + op2;
            if (numWheres > 1) {
                
                for (int i = 1; i < numWheres; ++i) {
                    andOr = (String) model.getValueAt(i, 0);
                    if (andOr.equalsIgnoreCase("")) {
                        andOr = "AND";
                    }
                    op1 = (String) model.getValueAt(i, 1);
                    condicion = (String) model.getValueAt(i, 2);
                    
                    if (condicion.equalsIgnoreCase("IS NULL") || condicion.equalsIgnoreCase("IS NOT NULL")) {
                        op2 = "";
                    }
                    else {
                        op2 = (String) model.getValueAt(i, 3);
                    }
                    
                    
                    where += "\r\n  " + andOr + " " + op1 + " " + condicion + " " + op2;
                }
            }
        }
        
        return where;
    }
    
    
    private String getOrderByClause() {
        String orderBy = "";
        DefaultTableModel model = (DefaultTableModel) orderByTable.getModel();
        int numOrderBy = model.getRowCount();
        
        if (numOrderBy == 0) {
            return orderBy;
        } else {
            orderBy += "\r\nORDER BY ";
            for (int i = 0; i < numOrderBy; ++i) {
                if (i == 0) {
                    orderBy += model.getValueAt(i, 0) + " ";
                    orderBy += model.getValueAt(i, 1);
                } else {
                    orderBy += ", " + model.getValueAt(i, 0) + " ";
                    orderBy += model.getValueAt(i, 1);
                }
            }
        }
        
        return orderBy;
    }
    
    private void generarSqlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarSqlButtonActionPerformed
        List<String> attributes = getSelectedAttributes();
        List<String> tables = getSelectedTablesFromAttributes();
        
        // SELECTS
        String query = "SELECT ";
        
        for (int i = 0; i < attributes.size(); ++i) {
            if (i == 0) {
                query += attributes.get(i);
            } else {
                query += ", " + attributes.get(i);
            }
        }
        
        // FROM
        query += getJoinClause();
        
        // WHERE
        query += getWhereClause();
        
        // ORDER BY
        query += getOrderByClause();
        
        sqlTextArea.setText(query);
        System.out.println("Query: " + query);
    }//GEN-LAST:event_generarSqlButtonActionPerformed
    
    private Connection getConnection() {
        // https://www.tutorialspoint.com/jdbc/viewing-result-sets.htm
        
        final String JDBC_URL = "jdbc:oracle:thin:@localhost:1521:XE";
        final String JDBC_DRIVER = "oracle.jdbc.OracleDriver";
        final String JDBC_USER = "SYSTEM";
        final String JDBC_PASS = "Passw0rd";
        
        try {
            Properties properties = new Properties();
            properties.put("user", JDBC_USER);
            properties.put("password", JDBC_PASS);
            return DriverManager.getConnection(JDBC_URL, properties);
        } catch (SQLException ex) {
            Logger.getLogger(TablasFrame.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }
    
    private void executeQuery() {
        DefaultTableModel model = (DefaultTableModel) resultadoTable.getModel();
        model.setColumnCount(0);
        model.setRowCount(0);
        
        // Construimos las columnas de la tabla donde vaoms a mostrar los resultados dinamicamente
        List<String> attributes = getSelectedAttributes();
        for (String s : attributes) {
            model.addColumn(s);
        }
        resultadoScrollPane.setViewportView(resultadoTable);
        repaint();
        
        // Crear conexion
        Connection con = getConnection();
        if (con != null) {
            try {
                // proceder a realizar el query
                System.out.println("con != null");
                Statement st = con.createStatement();
                String sql = sqlTextArea.getText();
                
                ResultSet rs = st.executeQuery(sql);
                ResultSetMetaData metaData = rs.getMetaData();
                
                /*
                List<Class> columnTypes = new ArrayList<>();
                // Determinamos los tipos de las columnas dinamicamente
                for (int col = 1; col <= metaData.getColumnCount(); ++col ) {
                    switch (metaData.getColumnType(col)) {
                        case Types.BIGINT: columnTypes.add(Integer.class); break;
                        case Types.INTEGER: columnTypes.add(Integer.class); break;
                        case Types.NUMERIC: columnTypes.add(Integer.class); break;
                        case Types.SMALLINT: columnTypes.add(Integer.class); break;
                        case Types.TINYINT: columnTypes.add(Integer.class); break;
                        case Types.BOOLEAN: columnTypes.add(Boolean.class); break;
                        case Types.DECIMAL: columnTypes.add(Float.class); break;
                        case Types.FLOAT: columnTypes.add(Float.class); break;
                        case Types.DOUBLE: columnTypes.add(Double.class); break;
                        case Types.REAL: columnTypes.add(Double.class); break;
                        case Types.CHAR: columnTypes.add(Character.class); break;
                        case Types.NVARCHAR: columnTypes.add(String.class); break;
                        case Types.VARCHAR: columnTypes.add(String.class); break;
                        case Types.TIME: columnTypes.add(String.class); break; // toca ver si funciona el tipo string
                        case Types.TIMESTAMP: columnTypes.add(String.class); break; // toca ver si funciona el tipo string
                        case Types.DATE: columnTypes.add(String.class); break; // toca ver si funciona el tipo string
                        case Types.NULL: columnTypes.add(Object.class); break;
                        default: columnTypes.add(Object.class); break;
                    }
                }
                
                System.out.println("columnTypes size: " + columnTypes.size());
                System.out.println("attributes size: " + attributes.size());
                
                System.out.println("tipos columnas: " + columnTypes);
                */
                while (rs.next()) {
                    Object[] arr = new Object[attributes.size()];
                    for (int i = 0; i < attributes.size(); ++i) {
                        int columnType = metaData.getColumnType(i+1);
                        arr[i] = rs.getString(i+1);
                    }
                    model.addRow(arr);
                }
                
                
            } catch (SQLException ex) {
                Logger.getLogger(TablasFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        // Cambiamos de tab
        tabbedPanel.setSelectedIndex(3);
    }
    
    private void ejecutarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarButtonActionPerformed
        executeQuery();
    }//GEN-LAST:event_ejecutarButtonActionPerformed

    private void agregarOrderByButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarOrderByButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) orderByTable.getModel();
        
        TableColumn attributeColumn = orderByTable.getColumnModel().getColumn(0);
        JComboBox attributeComboBox = new JComboBox();
        List<String> attributes = getSelectedAttributes();
        for (String s : attributes) {
            attributeComboBox.addItem(s);
        }
        attributeColumn.setCellEditor(new DefaultCellEditor(attributeComboBox));
        
        TableColumn ascDescColumn = orderByTable.getColumnModel().getColumn(1);
        JComboBox ascDescComboBox = new JComboBox();
        ascDescComboBox.addItem("ASC");
        ascDescComboBox.addItem("DESC");
        ascDescColumn.setCellEditor(new DefaultCellEditor(ascDescComboBox));
        model.addRow(new Object[]{"", "ASC"});
    }//GEN-LAST:event_agregarOrderByButtonActionPerformed

    private void eliminarOrderByButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarOrderByButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) orderByTable.getModel();
        if (model.getRowCount() > 0) {
            model.removeRow(model.getRowCount() - 1);
        }
    }//GEN-LAST:event_eliminarOrderByButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TablasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TablasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TablasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TablasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TablasFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarCondicionButton;
    private javax.swing.JButton agregarJoinButton;
    private javax.swing.JButton agregarOrderByButton;
    private javax.swing.JScrollPane atributosScrollPane;
    private javax.swing.JLabel atributosSeleccionadosLabel;
    private javax.swing.JScrollPane atributosSeleccionadosScrollPane;
    private javax.swing.JTable atributosSeleccionadosTable;
    private javax.swing.JTable atributosTable;
    private javax.swing.JButton cargarButton;
    private javax.swing.JButton construirButton;
    private javax.swing.JPanel detallesPanel;
    private javax.swing.JButton devolverSeleccionButton;
    private javax.swing.JButton devolverTodosButton;
    private javax.swing.JLabel disponiblesLabel;
    private javax.swing.JButton ejecutarButton;
    private javax.swing.JButton eliminarCondicionButton;
    private javax.swing.JButton eliminarJoinButton;
    private javax.swing.JButton eliminarOrderByButton;
    private javax.swing.JButton generarSqlButton;
    private javax.swing.JButton guardarButton;
    private javax.swing.JTable joinTable;
    private javax.swing.JList<String> leftList;
    private javax.swing.JScrollPane leftScrollPane;
    private javax.swing.JLabel mapeoLlavesLabel;
    private javax.swing.JScrollPane mapeoLlavesScrollPane;
    private javax.swing.JButton moverSeleccionButton;
    private javax.swing.JButton moverTodosButton;
    private javax.swing.JLabel orderByLabel;
    private javax.swing.JScrollPane orderByScrollPane;
    private javax.swing.JTable orderByTable;
    private javax.swing.JPanel queryPanel;
    private javax.swing.JLabel resultadoLabel;
    private javax.swing.JPanel resultadoPanel;
    private javax.swing.JScrollPane resultadoScrollPane;
    private javax.swing.JTable resultadoTable;
    private javax.swing.JList<String> rightList;
    private javax.swing.JScrollPane rightScrollPane;
    private javax.swing.JLabel seleccionadosLabel;
    private javax.swing.JLabel seleccionarLabel;
    private javax.swing.JLabel sqlLabel;
    private javax.swing.JScrollPane sqlScrollPane;
    private javax.swing.JTextArea sqlTextArea;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JPanel tablasPanel;
    private javax.swing.JButton verDetallesButton;
    private javax.swing.JButton volverButton;
    private javax.swing.JLabel whereLabel;
    private javax.swing.JScrollPane whereScrollPane;
    private javax.swing.JTable whereTable;
    // End of variables declaration//GEN-END:variables
}
