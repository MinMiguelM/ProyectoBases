/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import controllers.DbaMviewsJpaController;
import controllers.DbaTabColumnsJpaController;
import controllers.DbaTablesJpaController;
import controllers.DbaViewsJpaController;
import entities.DbaMviews;
import entities.DbaTabColumns;
import entities.DbaTables;
import entities.DbaViews;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author William
 */
public class TablasFrame extends javax.swing.JFrame {

    private String usuario;
    
    private EntityManagerFactory emf;
    
    /**
     * Creates new form TablasFrame
     */
    public TablasFrame() {
        initComponents();
        init();
    }
    
    public TablasFrame(String usuario) {
        this.usuario = usuario;
        initComponents();
        init();
        System.out.println(usuario);
    }
    
    private void loadTables() {
        DbaTablesJpaController tablesController = new DbaTablesJpaController(emf);
        DbaViewsJpaController viewsController = new DbaViewsJpaController(emf);
        DbaMviewsJpaController mviewsController = new DbaMviewsJpaController(emf);
        
        List<DbaTables> tables = tablesController.getTablesByOwner(usuario);
        List<DbaViews> views = viewsController.getViewsByOwner(usuario);
        List<DbaMviews> mviews = mviewsController.getMviewsByOwner(usuario);
        
        DefaultListModel model = (DefaultListModel) leftList.getModel();
        
        System.out.println("tables: " + tables.size());
        System.out.println("views: " + views.size());
        System.out.println("mviews: " + mviews.size());
        
        for (DbaTables table : tables) {
            model.addElement(table.getTableName());
        }
        
        for (DbaViews view : views) {
            model.addElement(view.getViewName());
        }
        
        for (DbaMviews mview : mviews) {
            model.addElement(mview.getMviewName());
        }
    }
    
    private void init() {
        emf = Persistence.createEntityManagerFactory("ProyectoBasesPU");
        loadTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPanel = new javax.swing.JTabbedPane();
        tablasPanel = new javax.swing.JPanel();
        moverSeleccionButton = new javax.swing.JButton();
        moverTodosButton = new javax.swing.JButton();
        devolverSeleccionButton = new javax.swing.JButton();
        devolverTodosButton = new javax.swing.JButton();
        leftScrollPane = new javax.swing.JScrollPane();
        leftList = new javax.swing.JList<>();
        rightScrollPane = new javax.swing.JScrollPane();
        rightList = new javax.swing.JList<>();
        disponiblesLabel = new javax.swing.JLabel();
        seleccionadosLabel = new javax.swing.JLabel();
        verDetallesButton = new javax.swing.JButton();
        detallesPanel = new javax.swing.JPanel();
        volverButton = new javax.swing.JButton();
        atributosScrollPane = new javax.swing.JScrollPane();
        atributosTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(this.usuario);

        moverSeleccionButton.setText(">");
        moverSeleccionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moverSeleccionButtonActionPerformed(evt);
            }
        });

        moverTodosButton.setText(">>");
        moverTodosButton.setMaximumSize(new java.awt.Dimension(50, 23));
        moverTodosButton.setMinimumSize(new java.awt.Dimension(50, 23));
        moverTodosButton.setPreferredSize(new java.awt.Dimension(50, 23));
        moverTodosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moverTodosButtonActionPerformed(evt);
            }
        });

        devolverSeleccionButton.setText("<");
        devolverSeleccionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devolverSeleccionButtonActionPerformed(evt);
            }
        });

        devolverTodosButton.setText("<<");
        devolverTodosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devolverTodosButtonActionPerformed(evt);
            }
        });

        leftList.setModel(new DefaultListModel());
        leftScrollPane.setViewportView(leftList);

        rightList.setModel(new DefaultListModel());
        rightScrollPane.setViewportView(rightList);

        disponiblesLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        disponiblesLabel.setText("Disponibles");

        seleccionadosLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        seleccionadosLabel.setText("Seleccionados");

        verDetallesButton.setText("Ver");
        verDetallesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verDetallesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tablasPanelLayout = new javax.swing.GroupLayout(tablasPanel);
        tablasPanel.setLayout(tablasPanelLayout);
        tablasPanelLayout.setHorizontalGroup(
            tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablasPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablasPanelLayout.createSequentialGroup()
                        .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tablasPanelLayout.createSequentialGroup()
                                .addComponent(leftScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(devolverTodosButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(moverTodosButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(moverSeleccionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(devolverSeleccionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(disponiblesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rightScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seleccionadosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablasPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(verDetallesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        tablasPanelLayout.setVerticalGroup(
            tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablasPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(disponiblesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tablasPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(seleccionadosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(leftScrollPane)
                        .addComponent(rightScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablasPanelLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(moverSeleccionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moverTodosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(devolverSeleccionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(devolverTodosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(61, 61, 61)
                .addComponent(verDetallesButton)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Tablas", tablasPanel);

        volverButton.setText("Volver");
        volverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverButtonActionPerformed(evt);
            }
        });

        atributosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TABLA", "ATRIBUTO", "TIPO", "LONGITUD", "PK", "FK", "IDX"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        atributosScrollPane.setViewportView(atributosTable);

        javax.swing.GroupLayout detallesPanelLayout = new javax.swing.GroupLayout(detallesPanel);
        detallesPanel.setLayout(detallesPanelLayout);
        detallesPanelLayout.setHorizontalGroup(
            detallesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detallesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detallesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(atributosScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                    .addGroup(detallesPanelLayout.createSequentialGroup()
                        .addComponent(volverButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        detallesPanelLayout.setVerticalGroup(
            detallesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detallesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(atributosScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(volverButton)
                .addGap(57, 57, 57))
        );

        tabbedPanel.addTab("Detalles", detallesPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPanel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moverSeleccionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moverSeleccionButtonActionPerformed
        List<String> selectedValuesList = leftList.getSelectedValuesList();
        int[] selectedIndices = leftList.getSelectedIndices();
        
        if (selectedValuesList.size() > 0) {
            System.out.println("seleccionados: " + selectedValuesList.size());
            
            DefaultListModel leftListModel = (DefaultListModel) leftList.getModel();
            for (int i = selectedIndices.length - 1; i >= 0; --i) {    
                leftListModel.remove(selectedIndices[i]);
            }
            
            DefaultListModel rightListModel = (DefaultListModel) rightList.getModel();
            for (int i = 0; i < selectedIndices.length; ++i) {
                rightListModel.addElement(selectedValuesList.get(i));
            }
            
        }
        
    }//GEN-LAST:event_moverSeleccionButtonActionPerformed

    private void devolverSeleccionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolverSeleccionButtonActionPerformed
        List<String> selectedValuesList = rightList.getSelectedValuesList();
        int[] selectedIndices = rightList.getSelectedIndices();
        
        if (selectedValuesList.size() > 0) {
            System.out.println(selectedValuesList);
            
            DefaultListModel rightListModel = (DefaultListModel) rightList.getModel();
            for (int i = selectedIndices.length - 1; i >= 0; --i) {    
                rightListModel.remove(selectedIndices[i]);
            }
            
            DefaultListModel leftListModel = (DefaultListModel) leftList.getModel();
            for (int i = 0; i < selectedIndices.length; ++i) {
                leftListModel.addElement(selectedValuesList.get(i));
            }
            
        }
    }//GEN-LAST:event_devolverSeleccionButtonActionPerformed

    private void moverTodosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moverTodosButtonActionPerformed
        DefaultListModel leftListModel = (DefaultListModel) leftList.getModel();
        
        Object[] array = leftListModel.toArray();
        if (array.length > 0) {
            System.out.println("disponibles: " + array.length);
            for (int i = array.length - 1; i >= 0; --i) {    
                leftListModel.remove(i);
            }
            
            DefaultListModel rightListModel = (DefaultListModel) rightList.getModel();
            for (int i = 0; i < array.length; ++i) {
                rightListModel.addElement((String) array[i]);
            }
            
        }
    }//GEN-LAST:event_moverTodosButtonActionPerformed

    private void devolverTodosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolverTodosButtonActionPerformed
        DefaultListModel rightListModel = (DefaultListModel) rightList.getModel();
        
        Object[] array = rightListModel.toArray();
        if (array.length > 0) {
            
            for (int i = array.length - 1; i >= 0; --i) {    
                rightListModel.remove(i);
            }
            
            DefaultListModel leftListModel = (DefaultListModel) leftList.getModel();
            for (int i = 0; i < array.length; ++i) {
                leftListModel.addElement((String) array[i]);
            }
            
        }
    }//GEN-LAST:event_devolverTodosButtonActionPerformed

    private void verDetallesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verDetallesButtonActionPerformed
        DefaultListModel rightListModel = (DefaultListModel) rightList.getModel();
        
        Object[] array = rightListModel.toArray();
        if (array.length > 0) {
            DefaultTableModel model = (DefaultTableModel) atributosTable.getModel();
            int rowCount = model.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; --i) {
                model.removeRow(i);
            }
            
            tabbedPanel.setSelectedIndex(1);
            
            DbaTabColumnsJpaController controller = new DbaTabColumnsJpaController(emf);
            List<DbaTabColumns> result = controller.getColumnsByOwner(usuario, array);
            System.out.println("result: " + result);
            
            
            for (DbaTabColumns col : result) {
                // TODO: falta mostrar si es PK, FK o IDX
                model.addRow(new Object[] {col.getTableName(), col.getColumnName(), col.getDataType(), col.getDataLength(), "", "", ""});
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona al menos una tabla/vista.");
        }
    }//GEN-LAST:event_verDetallesButtonActionPerformed

    private void volverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverButtonActionPerformed
        tabbedPanel.setSelectedIndex(0);
    }//GEN-LAST:event_volverButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TablasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TablasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TablasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TablasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TablasFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane atributosScrollPane;
    private javax.swing.JTable atributosTable;
    private javax.swing.JPanel detallesPanel;
    private javax.swing.JButton devolverSeleccionButton;
    private javax.swing.JButton devolverTodosButton;
    private javax.swing.JLabel disponiblesLabel;
    private javax.swing.JList<String> leftList;
    private javax.swing.JScrollPane leftScrollPane;
    private javax.swing.JButton moverSeleccionButton;
    private javax.swing.JButton moverTodosButton;
    private javax.swing.JList<String> rightList;
    private javax.swing.JScrollPane rightScrollPane;
    private javax.swing.JLabel seleccionadosLabel;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JPanel tablasPanel;
    private javax.swing.JButton verDetallesButton;
    private javax.swing.JButton volverButton;
    // End of variables declaration//GEN-END:variables
}
